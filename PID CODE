

#include <Wire.h>

#define I2C_SLAVE_ADDR 0x04 // 4 in hexadecimal

#define servoPin 6

#define IRSa 13  // Channel A direction 
#define IRSb 12  // Channel A direction 
#define IRSc 14  // Channel B direction 
#define IRSd 27  // Channel B direction 
#define IRSe 35  // Channel A direction 
#define IRSf 34  // Channel B direction 

  int16_t x = 0;
  int16_t y = 0;
  int16_t z = 0;

void setup(
  
) {
  // setup code here, to run once:
  // configure the IR sensor pins as inputs for the Esp
  pinMode(IRSa, INPUT);
  pinMode(IRSb, INPUT);
  pinMode(IRSc, INPUT);
  pinMode(IRSd, INPUT);
  pinMode(IRSe, INPUT);
  pinMode(IRSf, INPUT); 
  Serial.begin(9600);

}
void loop() {
  // put your main code here, to run repeatedly:
float IRsensor1, IRsensor2,IRsensor3,IRsensor4,IRsensor5,IRsensor6;
  
IRsensor1 = analogRead(IRSa);
IRsensor2 = analogRead(IRSb);
IRsensor3 = analogRead(IRSc);
IRsensor4 = analogRead(IRSd);
IRsensor5 = analogRead(IRSe);
IRsensor6 = analogRead(IRSf);

Serial.print("IRsensor1 ");
Serial.print(IRsensor1);
Serial.print(" IRsensor2 ");
Serial.print(IRsensor2);
Serial.print(" IRsensor3 ");
Serial.print(IRsensor3);
Serial.print(" IRsensor4 ");
Serial.print(IRsensor4);
Serial.print(" IRsensor5 ");
Serial.print(IRsensor5);
Serial.print(" IRsensor6 ");
Serial.println(IRsensor6);

//reference point for weighted average formula is the edge of IRsensor stripboard
//All of the distances are measured in centimeters
float weightedaverage1=((IRsensor1*0.8)+(IRsensor2*1.8)+(IRsensor3*3.6)+(IRsensor4*4.9)+(IRsensor5*6.8)+(IRsensor6*8.1))/((IRsensor1)+(IRsensor2)+(IRsensor3)+(IRsensor4)+(IRsensor5)+(IRsensor6));
// The weighted average formula is the sum of the distances from the edge of the IRsensor stripboard divided by the total of the IRsensor values
//The set point is the distance from the center of the car to the reference point that is used in the weighted average formula
float setpoint = 5.1;
float previouserrorvalue = setpoint-weightedaverage1;

// Sensor values are read again to calculate the new error value
IRsensor1 = analogRead(IRSa);
IRsensor2 = analogRead(IRSb);
IRsensor3 = analogRead(IRSc);
IRsensor4 = analogRead(IRSd);
IRsensor5 = analogRead(IRSe);
IRsensor6 = analogRead(IRSf);

Serial.print("IRsensor1 ");
Serial.print(IRsensor1);
Serial.print(" IRsensor2 ");
Serial.print(IRsensor2);
Serial.print(" IRsensor3 ");
Serial.print(IRsensor3);
Serial.print(" IRsensor4 ");
Serial.print(IRsensor4);
Serial.print(" IRsensor5 ");
Serial.print(IRsensor5);
Serial.print(" IRsensor6 ");
Serial.println(IRsensor6);

// Weighted average from the equation before is overridden as it is not needed in the calculation for the sencond error value and the value stored from the first value is already used
float weightedaverage2=((IRsensor1*0.8)+(IRsensor2*1.8)+(IRsensor3*3.6)+(IRsensor4*4.9)+(IRsensor5*6.8)+(IRsensor6*8.1))/((IRsensor1)+(IRsensor2)+(IRsensor3)+(IRsensor4)+(IRsensor5)+(IRsensor6));
// The weighted average formula is the sum of the distances from the edge of the IRsensor stripboard divided by the total of the IRsensor values
// Set point does not need to be defined again as it is defined before
float currenterrorvalue = setpoint - weightedaverage2;
// All of the k values used wihtin the PID equation are obtained thorugh trial and error
float kp = 1.4;
float ki = 1.7;
float kd = 0.8;
// the PID calculation outputs the value u 
float u = kp * currenterrorvalue + ki * currenterrorvalue + kd * ( currenterrorvalue - previouserrorvalue );
// This value of k is also calculted by trial and error and it i sthe scaling factor
float k = 3;
// x,y and z are the values that are calculated then sent to the Arduino 
  z = 135 + u ;     // equation for the servo angle
  y = 175 + ( k * u); // equation for the right motor speed
  x = 175 - ( k * u); // equation for the left motor speed

//Code to transfer values of x,y and z to the arduino
  Wire.beginTransmission(I2C_SLAVE_ADDR); // transmit to device #4
  /* depending on the mirocontroller, the int variable is stored as 32-bits or 16-bits
     if you want to increase the value range, first use a suitable variable type and then modify the code below
     for example; if the variable used to store x and y is 32-bits and you want to use signed values between -2^31 and (2^31)-1
     uncomment the four lines below relating to bits 32-25 and 24-17 for x and y
     for my microcontroller, int is 32-bits hence x and y are AND operated with a 32 bit hexadecimal number - change this if needed

     >> X refers to a shift right operator by X bits
  */
  //Wire.write((byte)((x & 0xFF000000) >> 24)); // bits 32 to 25 of x
  //Wire.write((byte)((x & 0x00FF0000) >> 16)); // bits 24 to 17 of x
  Wire.write((byte)((x & 0x0000FF00) >> 8));    // first byte of x, containing bits 16 to 9
  Wire.write((byte)(x & 0x000000FF));           // second byte of x, containing the 8 LSB - bits 8 to 1
  //Wire.write((byte)((y & 0xFF000000) >> 24)); // bits 32 to 25 of y
  //Wire.write((byte)((y & 0x00FF0000) >> 16)); // bits 24 to 17 of y
  Wire.write((byte)((y & 0x0000FF00) >> 8));    // first byte of y, containing bits 16 to 9
  Wire.write((byte)(y & 0x000000FF));    
    //Wire.write((byte)((z & 0xFF000000) >> 24)); // bits 32 to 25 of z
  //Wire.write((byte)((z & 0x00FF0000) >> 16)); // bits 24 to 17 of z
  Wire.write((byte)((z & 0x0000FF00) >> 8));    // first byte of z, containing bits 16 to 9
  Wire.write((byte)(z & 0x000000FF));    
  
  Wire.endTransmission();
 delay(1000);
}
